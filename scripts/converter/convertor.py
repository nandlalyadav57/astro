#! Define correct path to your python binary here


# This script will help to generate proper values file for Airflow chart version 1.6.0 .
# Redirect output into a file and then apply it via helm against broken deployment.


# Importing libraries
import sys
import yaml
from yaml import Loader


# Checking correct amount of passed arguments
if len(sys.argv) < 3:
    print("Please include the yaml file from the deployment and release name")
    print("example of command: convert.py elementary-phase-3031.yaml elementary-phase-3031")
    exit()


# Parcing imput yaml file and values assignment
with open(sys.argv[1], "r") as data:
    yaml_data = yaml.load(data, Loader=Loader)
    airflowVersion = yaml_data['airflow']['airflowVersion']
    baseDomain = yaml_data['ingress']['baseDomain']
    elasticSearchPass = yaml_data['airflow']['elasticsearch']['connection']['pass']
    astroReleaseName = yaml_data['airflow']['labels']['platform']
    dbHost = yaml_data['airflow']['data']['metadataConnection']['host']
    imageTag = yaml_data['airflow']['images']['airflow']['tag']
    dbPass = yaml_data['airflow']['data']['metadataConnection']['pass']
    celeryDBPass = yaml_data['airflow']['data']['resultBackendConnection']['pass']
    dbName = yaml_data['airflow']['data']['metadataConnection']['db']
    airflowDBUser = yaml_data['airflow']['data']['metadataConnection']['user']
    celeryDBUser = yaml_data['airflow']['data']['resultBackendConnection']['user']
    workspaceID = yaml_data['airflow']['labels']['workspace']


# Generating correct file for Airflow chart 1.6.0
    print("airflow:")
    print("  affinity: {}")
    print("  airflowConfigAnnotations: {}")
    print("  airflowHome: /usr/local/airflow")
    print("  airflowPodAnnotations: {}")
    print(f"  airflowVersion: {airflowVersion}")
    print("  allowPodLaunching: true")
    print("  cleanup:")
    print("    affinity: {}")
    print("    args: []")
    print("    command:")
    print("    - airflow-cleanup-pods")
    print("    - --namespace={{ .Release.Namespace }}")
    print("    enabled: true")
    print("    nodeSelector: {}")
    print("    podAnnotations: {}")
    print("    resources: {}")
    print("    schedule: 8-59/15 * * * *")
    print("    securityContext: {}")
    print("    serviceAccount:")
    print("      annotations: {}")
    print("      create: true")
    print("    tolerations: []")
    print("    topologySpreadConstraints: []")
    print("  config:")
    print("    api:")
    print("      auth_backend: '{{ ternary \"astronomer.flask_appbuilder.current_user_backend\"")
    print("        (ternary \"airflow.api.auth.backend.deny_al\" \"airflow.api.auth.backend.default\"  (semverCompare")
    print("        \">=2.0.0\" .Values.airflowVersion)) (and (.Values.useAstroSecurityManager)")
    print("        (semverCompare \">=2.0.0\" .Values.airflowVersion)) }}'")
    print("    astronomer:")
    print(f"      jwt_audience: deployments.{baseDomain}/{sys.argv[2]}")
    print("      jwt_signing_cert: /etc/airflow/tls/tls.crt")
    print("    celery:")
    print("      default_queue: celery")
    print("      worker_concurrency: 16")
    print("    celery_kubernetes_executor:")
    print("      kubernetes_queue: kubernetes")
    print("    core:")
    print("      colored_console_log: \"False\"")
    print("      dags_folder: '{{ include \"airflow_dags\" . }}'")
    print("      executor: '{{ .Values.executor }}'")
    print("      load_examples: \"False\"")
    print("      remote_logging: '\{\{- ternary \"True\" \"False\" .Values.elasticsearch.enabled }}'")
    print("    elasticsearch:")
    print("      elasticsearch_json_format: true")
    print("      elasticsearch_log_id_template: '\{dag_id\}_\{task_id\}_\{execution_date}_{try_number}'")
    print("      elasticsearch_write_stdout: true")
    print("      json_format: \"True\"")
    print("      log_id_template: '\{\{ternary \"\{dag_id\}-\{task_id\}-\{run_id\}-\{map_index\}-\{try_number\}\" ")
    print("        \"\{dag_id\}_\{task_id\}_\{execution_date\}_\{try_number\}\" (semverCompare \">=2.3.0\") ")
    print("        .Values.airflowVersion)}}'")
    print("      write_stdout: true")
    print("    elasticsearch_configs:")
    print("      max_retries: 3")
    print("      retry_timeout: \"True\"")
    print("      timeout: 30")
    print("    kerberos:")
    print("      ccache: '{{ .Values.kerberos.ccacheMountPath }}/{{ .Values.kerberos.ccacheFileName")
    print("        }}'")
    print("      keytab: '{{ .Values.kerberos.keytabPath }}'")
    print("      principal: '{{ .Values.kerberos.principal }}'")
    print("      reinit_frequency: '{{ .Values.kerberos.reinitFrequency }}'")
    print("    kubernetes:")
    print("      airflow_configmap: '{{ include \"airflow_config\" . }}'")
    print("      airflow_local_settings_configmap: '{{ include \"airflow_config\" . }}'")
    print("      dags_in_image: true")
    print("      image_pull_secrets: '{{ template \"registry_secret\" . }}'")
    print("      multi_namespace_mode: '{{ if .Values.multiNamespaceMode }}True{{ else }}False{{ ")
    print("        end }}' ")
    print("      namespace: '{{ .Release.Namespace }}'")
    print("      pod_template_file: '{{ include \"airflow_pod_template_file\" . }}/pod_template_file.yaml'")
    print("      worker_container_repository: '{{ .Values.images.airflow.repository | default")
    print("        .Values.defaultAirflowRepository }}'")
    print("      worker_container_tag: '{{ .Values.images.airflow.tag | default .Values.defaultAirflowTag")
    print("        }}'")
    print("      worker_service_account_name: '{{ include \"worker.serviceAccountName\" . }}'")
    print("    kubernetes_labels:")
    print("      component: worker")
    print("      release: '{{ .Release.Name }}'")
    print("      tier: airflow")
    print("    kubernetes_secrets:")
    print("      AIRFLOW__CORE__FERNET_KEY: '{{ printf \"%s=fernet-key\" (include \"fernet_key_secret\"")
    print("        .) }}'")
    print("      AIRFLOW__CORE__SQL_ALCHEMY_CONN: '{{ printf \"%s=connection\" (include \"airflow_metadata_secret\"")
    print("        .) }}'")
    print("      AIRFLOW_CONN_AIRFLOW_DB: '{{ printf \"%s=connection\" (include \"airflow_metadata_secret\"")
    print("        .) }}'")
    print("    logging:")
    print("      colored_console_log: \"False\"")
    print("      remote_logging: '{{- ternary \"True\" \"False\" .Values.elasticsearch.enabled }}'")
    print("    metrics:")
    print("      statsd_host: '{{ printf \"%s-statsd\" .Release.Name }}'")
    print("      statsd_on: '{{ ternary \"True\" \"False\" .Values.statsd.enabled }}'")
    print("      statsd_port: 9125")
    print("      statsd_prefix: airflow")
    print("    operators:")
    print("      default_queue: celery")
    print("    scheduler:")
    print("      run_duration: 41460")
    print("      standalone_dag_processor: '{{ ternary \"True\" \"False\" .Values.dagProcessor.enabled")
    print("        }}'")
    print("      statsd_host: '{{ printf \"%s-statsd\" .Release.Name }}'")
    print("      statsd_on: '{{ ternary \"True\" \"False\" .Values.statsd.enabled }}'")
    print("      statsd_port: 9125")
    print("      statsd_prefix: airflow")
    print("    webserver:")
    print(f"        base_url: https://deployments.{baseDomain}/{sys.argv[2]}/airflow")
    print("        enable_proxy_fix: \"True\"")
    print("        expose_config: true")
    print("        rbac: \"True\"")
    print("  createUserJob:")
    print("    affinity: {}")
    print("    annotations: {}")
    print("    args:")
    print("    - bash")
    print("    - -c")
    print("    - |-")
    print("      exec \\")
    print("      airflow {{ semverCompare \">=2.0.0\" .Values.airflowVersion | ternary \"users create\" \"create_user\" }} \"$@\" ")
    print("    - -- ")
    print("    - -r ")
    print("    - '{{ .Values.webserver.defaultUser.role }}'")
    print("    - -u ")
    print("    - '{{ .Values.webserver.defaultUser.username }}' ")
    print("    - -e ")
    print("    - '{{ .Values.webserver.defaultUser.email }}'")
    print("    - -f ")
    print("    - '{{ .Values.webserver.defaultUser.firstName }}' ")
    print("    - -l ")
    print("    - '{{ .Values.webserver.defaultUser.lastName }}' ")
    print("    - -p ")
    print("    - '{{ .Values.webserver.defaultUser.password }}' ")
    print("    command: null ")
    print("    extraContainers: [] ")
    print("    extraVolumeMounts: [] ")
    print("    extraVolumes: [] ")
    print("    jobAnnotations: {} ")
    print("    nodeSelector: {} ")
    print("    resources: {} ")
    print("    securityContext: {} ")
    print("    serviceAccount: ")
    print("      annotations: {} ")
    print("      create: true ")
    print("      name: null ")
    print("    tolerations: [] ")
    print("    topologySpreadConstraints: [] ")
    print("    useHelmHooks: true ")
    print("  dagDeployment: ")
    print("    branchName: "" ")
    print("    dagDirectoryLocation: "" ")
    print("    ephemeralStorage: 0 ")
    print("    knownHosts: "" ")
    print("    nfsLocation: "" ")
    print("    repositoryUrl: "" ")
    print("    rev: "" ")
    print("    sshKey: "" ")
    print("    syncInterval: 1 ")
    print("    syncTimeout: 1 ")
    print("    type: image ")
    print("  dagProcessor: ")
    print("    affinity: {} ")
    print("    args: ")
    print("    - bash ")
    print("    - -c ")
    print("    - exec airflow dag-processor ")
    print("    command: null ")
    print("    enabled: false ")
    print("    extraContainers: [] ")
    print("    extraInitContainers: [] ")
    print("    extraVolumeMounts: [] ")
    print("    extraVolumes: [] ")
    print("    livenessProbe: ")
    print("      command: null ")
    print("      failureThreshold: 5 ")
    print("      initialDelaySeconds: 10 ")
    print("      periodSeconds: 60 ")
    print("      timeoutSeconds: 20 ")
    print("    nodeSelector: {} ")
    print("    podAnnotations: {} ")
    print("    priorityClassName: null ")
    print("    replicas: 1 ")
    print("    resources: {} ")
    print("    safeToEvict: true ")
    print("    securityContext: {} ")
    print("    serviceAccount: ")
    print("      annotations: {} ")
    print("      create: true ")
    print("      name: null ")
    print("    strategy: ")
    print("      rollingUpdate: ")
    print("        maxSurge: 100% ")
    print("        maxUnavailable: 50% ")
    print("    terminationGracePeriodSeconds: 60 ")
    print("    tolerations: [] ")
    print("    topologySpreadConstraints: [] ")
    print("    waitForMigrations: ")
    print("      enabled: true ")
    print("  dags: ")
    print("    gitSync: ")
    print("      branch: v2-2-stable ")
    print("      containerName: git-sync ")
    print("      depth: 1 ")
    print("      enabled: false ")
    print("      extraVolumeMounts: [] ")
    print("      maxFailures: 0 ")
    print("      repo: https://github.com/apache/airflow.git ")
    print("      resources: {} ")
    print("      rev: HEAD ")
    print("      securityContext: {} ")
    print("      subPath: tests/dags ")
    print("      uid: 65533 ")
    print("      wait: 60 ")
    print("    persistence: ")
    print("      accessMode: ReadWriteOnce ")
    print("      enabled: false ")
    print("      existingClaim: null ")
    print("      size: 1Gi ")
    print("      storageClassName: null ")
    print("      subPath: null ")
    print("  data: ")
    print("    metadataConnection: ")
    print(f"      db: {dbName} ")
    print(f"      host: {dbHost} ")
    print(f"      pass: {dbPass} ")
    print("      port: 5432 ")
    print("      protocol: postgresql ")
    print("      sslmode: disable ")
    print(f"      user: {airflowDBUser} ")
    print("    resultBackendConnection: ")
    print(f"      db: {dbName} ")
    print(f"      host: {dbHost} ")
    print(f"      pass: {celeryDBPass} ")
    print("      port: 5432 ")
    print("      protocol: postgresql ")
    print("      sslmode: disable ")
    print(f"      user: {celeryDBUser} ")
    print("  defaultAirflowRepository: quay.io/astronomer/ap-airflow ")
    print(f"  defaultAirflowTag: {yaml_data['airflow']['defaultAirflowTag']} ")
    print("  elasticsearch: ")
    print("    connection: ")
    print(f"      host: {yaml_data['airflow']['elasticsearch']['connection']['host']} ")
    print(f"      pass: {elasticSearchPass} ")
    print(f"      port: {yaml_data['airflow']['elasticsearch']['connection']['port']} ")
    print("      scheme: http ")
    print(f"      user: {yaml_data['airflow']['elasticsearch']['connection']['user']} ")
    print("    enabled: true ")
    print("  enableBuiltInSecretEnvVars: ")
    print("    AIRFLOW__CELERY__BROKER_URL: true ")
    print("    AIRFLOW__CELERY__CELERY_RESULT_BACKEND: true ")
    print("    AIRFLOW__CELERY__RESULT_BACKEND: true ")
    print("    AIRFLOW__CORE__FERNET_KEY: true ")
    print("    AIRFLOW__CORE__SQL_ALCHEMY_CONN: true ")
    print("    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: true ")
    print("    AIRFLOW__ELASTICSEARCH__ELASTICSEARCH_HOST: true ")
    print("    AIRFLOW__ELASTICSEARCH__HOST: true ")
    print("    AIRFLOW__WEBSERVER__SECRET_KEY: true ")
    print("    AIRFLOW_CONN_AIRFLOW_DB: true ")
    print("  env:")
    print("  - name: AIRFLOW__ASTRONOMER__HOUSTON_JWK_URL ")
    print(f"    value: https://houston.{baseDomain}/v1/.well-known/jwks.json ")
    print("  - name: ASTRONOMER_ENVIRONMENT ")
    print("    value: software ")
    print("  - name: AIRFLOW__WEBSERVER__UPDATE_FAB_PERMS ")
    print("    value: \"True\" ")
    print("  - name: AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER ")
    print("    value: \"\" ")
    print(f"  executor: {yaml_data['airflow']['executor']} ")
    print("  extraConfigMaps: {} ")
    print("  extraSecrets: {} ")
    print(f"  fernetKey: {yaml_data['airflow']['fernetKey']}")
    print("  flower: ")
    print("    affinity: {} ")
    print("    enabled: true ")
    print("    extraContainers: [] ")
    print("    extraNetworkPolicies: ")
    print("    - namespaceSelector: {} ")
    print("      podSelector: ")
    print("        matchLabels: ")
    print("          component: ingress-controller ")
    print(f"          release: {astroReleaseName} ")
    print("          tier: nginx ")
    print("    extraVolumeMounts: [] ")
    print("    extraVolumes: [] ")
    print("    networkPolicy: ")
    print("      ingress: ")
    print("        from: [] ")
    print("        ports: ")
    print("        - port: '{{ .Values.ports.flowerUI }}' ")
    print("    nodeSelector: {} ")
    print("    podAnnotations: {} ")
    print("    resources: ")
    print("      limits: ")
    print("        cpu: 200m ")
    print("        memory: 768Mi ")
    print("      requests: ")
    print("        cpu: 200m ")
    print("        memory: 768Mi ")
    print("    securityContext: {} ")
    print("    service: ")
    print("      annotations: {} ")
    print("      loadBalancerIP: null ")
    print("      loadBalancerSourceRanges: [] ")
    print("      ports: ")
    print("      - name: flower-ui ")
    print("        port: '{{ .Values.ports.flowerUI }}' ")
    print("      type: ClusterIP ")
    print("    serviceAccount: ")
    print("      annotations: {} ")
    print("      create: true ")
    print("      name: null ")
    print("    tolerations: [] ")
    print("    topologySpreadConstraints: [] ")
    print("  fullnameOverride: "" ")
    print("  gid: 50000 ")
    print("  global: {} ")
    print("  images: ")
    print("    airflow: ")
    print("      pullPolicy: IfNotPresent ")
    print(f"      repository: registry.{baseDomain}/{sys.argv[2]}/airflow ")
    print(f"      tag: {imageTag} ")
    print("    flower: ")
    print("      pullPolicy: IfNotPresent ")
    print("      repository: null ")
    print("      tag: null ")
    print("    gitSync: ")
    print("      pullPolicy: IfNotPresent ")
    print("      repository: quay.io/astronomer/ap-git-sync ")
    print("      tag: 3.5.0 ")
    print("    migrationsWaitTimeout: 60 ")
    print("    pgbouncer: ")
    print("      pullPolicy: IfNotPresent ")
    print("      repository: quay.io/astronomer/ap-pgbouncer ")
    print("      tag: 1.17.0-3 ")
    print("    pgbouncerExporter: ")
    print("      pullPolicy: IfNotPresent ")
    print("      repository: quay.io/astronomer/ap-pgbouncer-exporter ")
    print("      tag: 0.13.0-4 ")
    print("    pod_template: ")
    print("      pullPolicy: IfNotPresent ")
    print(f"      repository: registry.{baseDomain}/{sys.argv[2]}/airflow ")
    print(f"      tag: {imageTag} ")
    print("    redis: ")
    print("      pullPolicy: IfNotPresent ")
    print("      repository: quay.io/astronomer/ap-redis ")
    print("      tag: 6.2.7 ")
    print("    statsd: ")
    print("      pullPolicy: IfNotPresent ")
    print("      repository: quay.io/astronomer/ap-statsd-exporter ")
    print("      tag: 0.22.7 ")
    print("    useDefaultImageForMigration: false ")
    print("  ingress: ")
    print("    enabled: null ")
    print("    flower: ")
    print("      annotations: {} ")
    print("      enabled: false ")
    print("      host: "" ")
    print("      hosts: [] ")
    print("      ingressClassName: "" ")
    print("      path: / ")
    print("      pathType: ImplementationSpecific ")
    print("      tls: ")
    print("        enabled: false ")
    print("        secretName: "" ")
    print("    web: ")
    print("      annotations: {} ")
    print("      enabled: false ")
    print("      host: "" ")
    print("      hosts: [] ")
    print("      ingressClassName: "" ")
    print("      path: / ")
    print("      pathType: ImplementationSpecific ")
    print("      precedingPaths: [] ")
    print("      succeedingPaths: [] ")
    print("      tls: ")
    print("        enabled: false ")
    print("        secretName: "" ")
    print("  kerberos: ")
    print("    ccacheFileName: cache ")
    print("    ccacheMountPath: /var/kerberos-ccache ")
    print("    config: | ")
    print("      # This is an example config showing how you can use templating and how \"example\" config ")
    print("      # might look like. It works with the test kerberos server that we are using during integration ")
    print("      # testing at Apache Airflow (see `scripts/ci/docker-compose/integration-kerberos.yml` but in ")
    print("      # order to make it production-ready you must replace it with your own configuration that ")
    print("      # Matches your kerberos deployment. Administrators of your Kerberos instance should ")
    print("      # provide the right configuration. ")
    print(" ")
    print("      [logging] ")
    print("      default = \"FILE:{{ template \"airflow_logs_no_quote\" . }}/kerberos_libs.log\" ")
    print("      kdc = \"FILE:{{ template \"airflow_logs_no_quote\" . }}/kerberos_kdc.log\" ")
    print("      admin_server = \"FILE:{{ template \"airflow_logs_no_quote\" . }}/kadmind.log\" ")
    print(" ")
    print("      [libdefaults] ")
    print("      default_realm = FOO.COM ")
    print("      ticket_lifetime = 10h ")
    print("      renew_lifetime = 7d ")
    print("      forwardable = true ")
    print(" ")
    print("      [realms] ")
    print("      FOO.COM = { ")
    print("        kdc = kdc-server.foo.com ")
    print("        admin_server = admin_server.foo.com ")
    print("      } ")
    print("    configPath: /etc/krb5.conf ")
    print("    enabled: false ")
    print("    keytabBase64Content: null ")
    print("    keytabPath: /etc/airflow.keytab ")
    print("    principal: airflow@FOO.COM ")
    print("    reinitFrequency: 3600 ")
    print("  kubeVersionOverride: "" ")
    print("  labels: ")
    print(f"    platform: {astroReleaseName} ")
    print(f"    workspace: {workspaceID} ")
    print("  limits: ")
    print("  - max: ")
    print("      cpu: 10000m ")
    print("      memory: 38400Mi ")
    print("    type: Pod ")
    print("  - default: ")
    print("      cpu: 100m ")
    print("      memory: 384Mi ")
    print("    defaultRequest: ")
    print("      cpu: 100m ")
    print("      memory: 384Mi ")
    print("    type: Container ")
    print("  logs: ")
    print("    persistence: ")
    print("      enabled: false ")
    print("      existingClaim: null ")
    print("      size: 100Gi ")
    print("      storageClassName: null ")
    print("  migrateDatabaseJob: ")
    print("    affinity: {} ")
    print("    annotations: ")
    print("      sidecar.istio.io/inject: \"false\" ")
    print("    enabled: true ")
    print("    extraContainers: [] ")
    print("    extraVolumeMounts: [] ")
    print("    extraVolumes: [] ")
    print("    jobAnnotations: {} ")
    print("    nodeSelector: {} ")
    print("    resources: {} ")
    print("    securityContext: {} ")
    print("    serviceAccount: ")
    print("      annotations: {} ")
    print("      create: true ")
    print("      name: null ")
    print("    tolerations: [] ")
    print("    topologySpreadConstraints: [] ")
    print("    useHelmHooks: true ")
    print("  multiNamespaceMode: false ")
    print("  nameOverride: "" ")
    print("  networkPolicies: ")
    print("    enabled: true ")
    print("  nodeSelector: {} ")
    print("  pgbouncer: ")
    print("    affinity: {} ")
    print("    auth_file: /etc/pgbouncer/users.txt ")
    print("    auth_type: md5 ")
    print("    ciphers: normal ")
    print("    command: ")
    print("    - pgbouncer ")
    print("    - -u ")
    print("    - nobody ")
    print("    - /etc/pgbouncer/pgbouncer.ini ")
    print("    enabled: true ")
    print("    extraIni: "" ")
    print("    extraNetworkPolicies: ")
    print("    - namespaceSelector: {} ")
    print("      podSelector: ")
    print("        matchLabels: ")
    print("          component: prometheus ")
    print(f"          release: {astroReleaseName} ")
    print("          tier: monitoring ")
    print("    extraVolumeMounts: [] ")
    print("    extraVolumes: [] ")
    print("    logConnections: 0 ")
    print("    logDisconnections: 0 ")
    print("    maxClientConn: 365 ")
    print("    metadataPoolSize: 36 ")
    print("    metricsExporterSidecar: ")
    print("      resources: {} ")
    print("      sslmode: disable ")
    print("    nodeSelector: {} ")
    print("    podDisruptionBudget: ")
    print("      config: ")
    print("        maxUnavailable: 1 ")
    print("      enabled: false ")
    print("    resources: ")
    print("      limits: ")
    print("        cpu: 200m ")
    print("        memory: 768Mi ")
    print("      requests: ")
    print("        cpu: 200m ")
    print("        memory: 768Mi ")
    print("    resultBackendPoolSize: 2 ")
    print("    service: ")
    print("      extraAnnotations: ")
    print(f"        astronomer.io/platform-release: {astroReleaseName} ")
    print("    serviceAccount: ")
    print("      annotations: {} ")
    print("      create: true ")
    print("      name: null ")
    print("    ssl: ")
    print("      ca: null ")
    print("      cert: null ")
    print("      key: null ")
    print("    sslmode: prefer ")
    print("    tolerations: [] ")
    print("    topologySpreadConstraints: [] ")
    print("    uid: 65534 ")
    print("    verbose: 0 ")
    print("  podMutation: ")
    print("    affinity: {} ")
    print("    tolerations: [] ")
    print("  ports: ")
    print("    airflowUI: 8080 ")
    print("    flowerUI: 5555 ")
    print("    pgbouncer: 6543 ")
    print("    pgbouncerScrape: 9127 ")
    print("    redisDB: 6379 ")
    print("    statsdIngest: 9125 ")
    print("    statsdScrape: 9102 ")
    print("    workerLogs: 8793 ")
    print("  postgresql: ")
    print("    audit: ")
    print("      clientMinMessages: error ")
    print("      logConnections: false ")
    print("      logDisconnections: false ")
    print("      logHostname: false ")
    print("      logLinePrefix: "" ")
    print("      logTimezone: "" ")
    print("      pgAuditLog: "" ")
    print("      pgAuditLogCatalog: \"off\" ")
    print("    common: ")
    print("      exampleValue: common-chart ")
    print("      global: ")
    print("        imagePullSecrets: [] ")
    print("        imageRegistry: null ")
    print("        postgresql: ")
    print("          existingSecret: null ")
    print("          postgresqlDatabase: null ")
    print("          postgresqlPassword: null ")
    print("          postgresqlUsername: null ")
    print("          replicationPassword: null ")
    print("          servicePort: null ")
    print("        storageClass: null ")
    print("    commonAnnotations: {} ")
    print("    containerSecurityContext: ")
    print("      enabled: true ")
    print("      runAsUser: 1001 ")
    print("    customLivenessProbe: {} ")
    print("    customReadinessProbe: {} ")
    print("    customStartupProbe: {} ")
    print("    enabled: false ")
    print("    extraDeploy: [] ")
    print("    extraEnv: [] ")
    print("    global: ")
    print("      imagePullSecrets: [] ")
    print("      imageRegistry: null ")
    print("      postgresql: ")
    print("        existingSecret: null ")
    print("        postgresqlDatabase: null ")
    print("        postgresqlPassword: null ")
    print("        postgresqlUsername: null ")
    print("        replicationPassword: null ")
    print("        servicePort: null ")
    print("      storageClass: null ")
    print("    image: ")
    print("      debug: false ")
    print("      pullPolicy: IfNotPresent ")
    print("      pullSecrets: [] ")
    print("      registry: docker.io ")
    print("      repository: bitnami/postgresql ")
    print("      tag: 11.12.0-debian-10-r44 ")
    print("    initdbScripts: {} ")
    print("    ldap: ")
    print("      baseDN: "" ")
    print("      bind_password: null ")
    print("      bindDN: "" ")
    print("      enabled: false ")
    print("      port: "" ")
    print("      prefix: "" ")
    print("      scheme: "" ")
    print("      search_attr: "" ")
    print("      search_filter: "" ")
    print("      server: "" ")
    print("      suffix: "" ")
    print("      tls: {} ")
    print("      url: "" ")
    print("    livenessProbe: ")
    print("      enabled: true ")
    print("      failureThreshold: 6 ")
    print("      initialDelaySeconds: 30 ")
    print("      periodSeconds: 10 ")
    print("      successThreshold: 1 ")
    print("      timeoutSeconds: 5 ")
    print("    metrics: ")
    print("      customMetrics: {} ")
    print("      enabled: false ")
    print("      extraEnvVars: {} ")
    print("      image: ")
    print("        pullPolicy: IfNotPresent ")
    print("        pullSecrets: [] ")
    print("        registry: docker.io ")
    print("        repository: bitnami/postgres-exporter ")
    print("        tag: 0.9.0-debian-10-r108 ")
    print("      livenessProbe: ")
    print("        enabled: true ")
    print("        failureThreshold: 6 ")
    print("        initialDelaySeconds: 5 ")
    print("        periodSeconds: 10 ")
    print("        successThreshold: 1 ")
    print("        timeoutSeconds: 5 ")
    print("      prometheusRule: ")
    print("        additionalLabels: {} ")
    print("        enabled: false ")
    print("        namespace: "" ")
    print("        rules: [] ")
    print("      readinessProbe: ")
    print("        enabled: true ")
    print("        failureThreshold: 6 ")
    print("        initialDelaySeconds: 5 ")
    print("        periodSeconds: 10 ")
    print("        successThreshold: 1 ")
    print("        timeoutSeconds: 5 ")
    print("      resources: {} ")
    print("      securityContext: ")
    print("        enabled: false ")
    print("        runAsUser: 1001 ")
    print("      service: ")
    print("        annotations: ")
    print("          prometheus.io/port: \"9187\" ")
    print("          prometheus.io/scrape: \"true\" ")
    print("        loadBalancerIP: null ")
    print("        type: ClusterIP ")
    print("      serviceMonitor: ")
    print("        additionalLabels: {} ")
    print("        enabled: false ")
    print("        interval: null ")
    print("        namespace: null ")
    print("        scrapeTimeout: null ")
    print("    networkPolicy: ")
    print("      allowExternal: true ")
    print("      enabled: false ")
    print("      explicitNamespacesSelector: {} ")
    print("    persistence: ")
    print("      accessModes: ")
    print("      - ReadWriteOnce ")
    print("      annotations: {} ")
    print("      enabled: true ")
    print("      existingClaim: null ")
    print("      mountPath: /bitnami/postgresql ")
    print("      selector: {} ")
    print("      size: 8Gi ")
    print("      storageClass: null ")
    print("      subPath: "" ")
    print("    pgHbaConfiguration: "" ")
    print("    postgresqlDataDir: /bitnami/postgresql/data ")
    print("    postgresqlPassword: postgres ")
    print("    postgresqlSharedPreloadLibraries: pgaudit ")
    print("    postgresqlUsername: postgres ")
    print("    primary: ")
    print("      affinity: {} ")
    print("      annotations: {} ")
    print("      extraInitContainers: [] ")
    print("      extraVolumeMounts: [] ")
    print("      extraVolumes: [] ")
    print("      labels: {} ")
    print("      nodeAffinityPreset: ")
    print("        key: "" ")
    print("        type: "" ")
    print("        values: [] ")
    print("      nodeSelector: {} ")
    print("      podAffinityPreset: "" ")
    print("      podAnnotations: {} ")
    print("      podAntiAffinityPreset: soft ")
    print("      podLabels: {} ")
    print("      priorityClassName: "" ")
    print("      service: ")
    print("        clusterIP: null ")
    print("        nodePort: null ")
    print("        type: null ")
    print("      sidecars: [] ")
    print("      tolerations: [] ")
    print("    primaryAsStandBy: ")
    print("      enabled: false ")
    print("      primaryHost: null ")
    print("      primaryPort: null ")
    print("    psp: ")
    print("      create: false ")
    print("    rbac: ")
    print("      create: false ")
    print("    readReplicas: ")
    print("      affinity: {} ")
    print("      annotations: {} ")
    print("      extraInitContainers: [] ")
    print("      extraVolumeMounts: [] ")
    print("      extraVolumes: [] ")
    print("      labels: {} ")
    print("      nodeAffinityPreset: ")
    print("        key: "" ")
    print("        type: "" ")
    print("        values: [] ")
    print("      nodeSelector: {} ")
    print("      persistence: ")
    print("        enabled: true ")
    print("      podAffinityPreset: "" ")
    print("      podAnnotations: {} ")
    print("      podAntiAffinityPreset: soft ")
    print("      podLabels: {} ")
    print("      priorityClassName: "" ")
    print("      resources: {} ")
    print("      service: ")
    print("        clusterIP: null ")
    print("        nodePort: null ")
    print("        type: null ")
    print("      sidecars: [] ")
    print("      tolerations: [] ")
    print("    readinessProbe: ")
    print("      enabled: true ")
    print("      failureThreshold: 6 ")
    print("      initialDelaySeconds: 5 ")
    print("      periodSeconds: 10 ")
    print("      successThreshold: 1 ")
    print("      timeoutSeconds: 5 ")
    print("    replication: ")
    print("      applicationName: my_application ")
    print("      enabled: false ")
    print("      numSynchronousReplicas: 0 ")
    print("      password: repl_password ")
    print("      readReplicas: 1 ")
    print("      synchronousCommit: \"off\" ")
    print("      user: repl_user ")
    print("    resources: ")
    print("      requests: ")
    print("        cpu: 250m ")
    print("        memory: 256Mi ")
    print("    securityContext: ")
    print("      enabled: true ")
    print("      fsGroup: 1001 ")
    print("    service: ")
    print("      annotations: {} ")
    print("      clusterIP: null ")
    print("      loadBalancerIP: null ")
    print("      loadBalancerSourceRanges: [] ")
    print("      nodePort: null ")
    print("      port: 5432 ")
    print("      type: ClusterIP ")
    print("    serviceAccount: ")
    print("      enabled: false ")
    print("      name: null ")
    print("    shmVolume: ")
    print("      chmod: ")
    print("        enabled: true ")
    print("      enabled: true ")
    print("      sizeLimit: null ")
    print("    startupProbe: ")
    print("      enabled: false ")
    print("      failureThreshold: 10 ")
    print("      initialDelaySeconds: 30 ")
    print("      periodSeconds: 15 ")
    print("      successThreshold: 1 ")
    print("      timeoutSeconds: 5 ")
    print("    tls: ")
    print("      autoGenerated: false ")
    print("      certCAFilename: null ")
    print("      certFilename: "" ")
    print("      certKeyFilename: "" ")
    print("      certificatesSecret: "" ")
    print("      crlFilename: null ")
    print("      enabled: false ")
    print("      preferServerCiphers: true ")
    print("    updateStrategy: ")
    print("      type: RollingUpdate ")
    print("    usePasswordFile: false ")
    print("    volumePermissions: ")
    print("      enabled: false ")
    print("      image: ")
    print("        pullPolicy: Always ")
    print("        pullSecrets: [] ")
    print("        registry: docker.io ")
    print("        repository: bitnami/bitnami-shell ")
    print("        tag: 10-debian-10-r125 ")
    print("      securityContext: ")
    print("        runAsUser: 0 ")
    print("  quotas: ")
    print("    limits.cpu: 11000m ")
    print("    limits.ephemeral-storage: 50Gi ")
    print("    limits.memory: 42240Mi ")
    print("    pods: 56 ")
    print("    requests.cpu: 11000m ")
    print("    requests.ephemeral-storage: 50Gi ")
    print("    requests.memory: 42240Mi ")
    print("  rbac: ")
    print("    create: true ")
    print("    createSCCRoleBinding: false ")
    print("  redis: ")
    print("    affinity: {} ")
    print("    enabled: true ")
    print("    nodeSelector: {} ")
    print("    persistence: ")
    print("      annotations: {} ")
    print("      enabled: true ")
    print("      size: 1Gi ")
    print("      storageClassName: null ")
    print("    resources: ")
    print("      limits: ")
    print("        cpu: 200m ")
    print("        memory: 768Mi ")
    print("      requests: ")
    print("        cpu: 200m ")
    print("        memory: 768Mi ")
    print("    safeToEvict: true ")
    print("    securityContext: ")
    print("      fsGroup: 999 ")
    print("      runAsUser: 999 ")
    print("    serviceAccount: ")
    print("      annotations: {} ")
    print("      create: true ")
    print("      name: null ")
    print("    terminationGracePeriodSeconds: 600 ")
    print("    tolerations: [] ")
    print("    topologySpreadConstraints: [] ")
    print("    uid: 0 ")
    print("  registry: ")
    print("    connection: ")
    print(f"      email: {yaml_data['airflow']['registry']['connection']['email']} ")
    print(f"      host: {yaml_data['airflow']['registry']['connection']['host']} ")
    print(f"      pass: {yaml_data['airflow']['registry']['connection']['pass']}  ")
    print(f"      user: {yaml_data['airflow']['registry']['connection']['user']} ")
    print("    secretName: null ")
    print("  scheduler: ")
    print("    affinity: ")
    print("      podAntiAffinity: ")
    print("        preferredDuringSchedulingIgnoredDuringExecution: ")
    print("        - podAffinityTerm: ")
    print("            labelSelector: ")
    print("              matchExpressions: ")
    print("              - key: component ")
    print("                operator: In ")
    print("                values: ")
    print("                - scheduler ")
    print("            topologyKey: kubernetes.io/hostname ")
    print("          weight: 100 ")
    print("    args: ")
    print("    - bash ")
    print("    - -c ")
    print("    - exec airflow scheduler ")
    print("    extraContainers: [] ")
    print("    extraInitContainers: [] ")
    print("    extraVolumeMounts: [] ")
    print("    extraVolumes: [] ")
    print("    livenessProbe: ")
    print("      failureThreshold: 5 ")
    print("      initialDelaySeconds: 10 ")
    print("      periodSeconds: 60 ")
    print("      timeoutSeconds: 30 ")
    print("    logGroomerSidecar: ")
    print("      args: ")
    print("      - /usr/local/bin/clean-airflow-logs ")
    print("      enabled: true ")
    print("      resources: {} ")
    print("      retentionDays: 15 ")
    print("    nodeSelector: {} ")
    print("    podAnnotations: {} ")
    print("    podDisruptionBudget: ")
    print("      config: ")
    print("        maxUnavailable: 1 ")
    print("      enabled: false ")
    print("    replicas: 1 ")
    print("    resources: ")
    print("      limits: ")
    print("        cpu: 500m ")
    print("        ephemeral-storage: 2Gi ")
    print("        memory: 1920Mi ")
    print("      requests: ")
    print("        cpu: 500m ")
    print("        ephemeral-storage: 1Gi ")
    print("        memory: 1920Mi ")
    print("    safeToEvict: true ")
    print("    securityContext: {} ")
    print("    serviceAccount: ")
    print("      annotations: {} ")
    print("      create: true ")
    print("      name: null ")
    print("    strategy: ")
    print("      type: Recreate ")
    print("    tolerations: [] ")
    print("    topologySpreadConstraints: [] ")
    print("    waitForMigrations: ")
    print("      enabled: true ")
    print("  secret: [] ")
    print("  securityContext: {} ")
    print("  statsd: ")
    print("    affinity: {} ")
    print("    enabled: true ")
    print("    extraMappings: [] ")
    print("    extraNetworkPolicies: ")
    print("    - namespaceSelector: {} ")
    print("      podSelector: ")
    print("        matchLabels: ")
    print("          component: prometheus ")
    print(f"          release: {astroReleaseName} ")
    print("          tier: monitoring ")
    print("    nodeSelector: {} ")
    print("    resources: ")
    print("      limits: ")
    print("        cpu: 200m ")
    print("        memory: 768Mi ")
    print("      requests: ")
    print("        cpu: 200m ")
    print("        memory: 768Mi ")
    print("    securityContext: {} ")
    print("    service: ")
    print("      extraAnnotations: ")
    print(f"        astronomer.io/platform-release: {astroReleaseName} ")
    print("    serviceAccount: ")
    print("      annotations: {} ")
    print("      create: true ")
    print("      name: null ")
    print("    tolerations: [] ")
    print("    topologySpreadConstraints: [] ")
    print("    uid: 65534 ")
    print("  tolerations: [] ")
    print("  topologySpreadConstraints: [] ")
    print("  triggerer: ")
    print("    affinity: {} ")
    print("    args: ")
    print("    - bash ")
    print("    - -c ")
    print("    - exec airflow triggerer ")
    print("    enabled: true ")
    print("    extraContainers: [] ")
    print("    extraInitContainers: [] ")
    print("    extraVolumeMounts: [] ")
    print("    extraVolumes: [] ")
    print("    livenessProbe: ")
    print("      command: null ")
    print("      failureThreshold: 5 ")
    print("      initialDelaySeconds: 10 ")
    print("      periodSeconds: 60 ")
    print("      timeoutSeconds: 20 ")
    print("    nodeSelector: {} ")
    print("    podAnnotations: {} ")
    print("    replicas: 1 ")
    print("    resources: ")
    print("      limits: ")
    print("        cpu: 500m ")
    print("        memory: 1920Mi ")
    print("      requests: ")
    print("        cpu: 500m ")
    print("        memory: 1920Mi ")
    print("    safeToEvict: true ")
    print("    securityContext: {} ")
    print("    serviceAccount: ")
    print("      annotations: {} ")
    print("      create: true ")
    print("      name: null ")
    print("    strategy: ")
    print("      rollingUpdate: ")
    print("        maxSurge: 100% ")
    print("        maxUnavailable: 50% ")
    print("    terminationGracePeriodSeconds: 60 ")
    print("    tolerations: [] ")
    print("    topologySpreadConstraints: [] ")
    print("    waitForMigrations: ")
    print("      enabled: true ")
    print("  uid: 50000 ")
    print("  useAstroSecurityManager: true ")
    print("  webserver: ")
    print("    affinity: {} ")
    print("    allowPodLogReading: false ")
    print("    args: ")
    print("    - airflow ")
    print("    - webserver ")
    print("    defaultUser: ")
    print("      email: admin@example.com ")
    print("      enabled: false ")
    print("      firstName: admin ")
    print("      lastName: user ")
    print("      password: admin ")
    print("      role: Admin ")
    print("      username: admin ")
    print("    extraContainers: [] ")
    print("    extraInitContainers: [] ")
    print("    extraNetworkPolicies: ")
    print("    - namespaceSelector: {} ")
    print("      podSelector: ")
    print("        matchLabels: ")
    print("          component: ingress-controller ")
    print(f"          release: {astroReleaseName} ")
    print("          tier: nginx ")
    print("    extraVolumeMounts: ")
    print("    - mountPath: /etc/airflow/tls ")
    print("      name: signing-certificate ")
    print("      readOnly: true ")
    print("    extraVolumes: ")
    print("    - name: signing-certificate ")
    print("      secret: ")
    print(f"        secretName: {astroReleaseName}-houston-jwt-signing-certificate ")
    print("    livenessProbe: ")
    print("      failureThreshold: 20 ")
    print("      initialDelaySeconds: 15 ")
    print("      periodSeconds: 5 ")
    print("      timeoutSeconds: 30 ")
    print("    networkPolicy: ")
    print("      ingress: ")
    print("        from: [] ")
    print("        ports: ")
    print("        - port: '{{ .Values.ports.airflowUI }}' ")
    print("    nodeSelector: {} ")
    print("    podAnnotations: {} ")
    print("    podDisruptionBudget: ")
    print("      config: ")
    print("        maxUnavailable: 1 ")
    print("      enabled: false ")
    print("    readinessProbe: ")
    print("      failureThreshold: 20 ")
    print("      initialDelaySeconds: 15 ")
    print("      periodSeconds: 5 ")
    print("      timeoutSeconds: 30 ")
    print("    replicas: 1 ")
    print("    resources: ")
    print("      limits: ")
    print("        cpu: 500m ")
    print("        ephemeral-storage: 2Gi ")
    print("        memory: 1920Mi ")
    print("      requests: ")
    print("        cpu: 500m ")
    print("        ephemeral-storage: 1Gi ")
    print("        memory: 1920Mi ")
    print("    securityContext: {} ")
    print("    service: ")
    print("      annotations: {} ")
    print("      loadBalancerIP: null ")
    print("      loadBalancerSourceRanges: [] ")
    print("      ports: ")
    print("      - name: airflow-ui ")
    print("        port: '{{ .Values.ports.airflowUI }}' ")
    print("      type: ClusterIP ")
    print("    serviceAccount: ")
    print("      annotations: {} ")
    print("      create: true ")
    print("      name: null ")
    print("    tolerations: [] ")
    print("    topologySpreadConstraints: [] ")
    print("    waitForMigrations: ")
    print("      enabled: true ")
    print("    webserverConfig: | ")
    print("      import os ")
    print("      from airflow import configuration as conf ")
    print("      from flask_appbuilder.security.manager import AUTH_REMOTE_USER ")
    print("      basedir = os.path.abspath(os.path.dirname(__file__)) ")
    print(" ")
    print("      # The SQLAlchemy connection string. ")
    print("      SQLALCHEMY_DATABASE_URI = conf.get('core', 'SQL_ALCHEMY_CONN') ")
    print(" ")
    print("      # Flask-WTF flag for CSRF ")
    print("      CSRF_ENABLED = True ")
    print(" ")
    print("      # ---------------------------------------------------- ")
    print("      # AUTHENTICATION CONFIG ")
    print("      # ---------------------------------------------------- ")
    print("      {{- if .Values.useAstroSecurityManager }} ")
    print("      AUTH_TYPE = AUTH_REMOTE_USER ")
    print(" ")
    print("      from astronomer.flask_appbuilder.security import AirflowAstroSecurityManager ")
    print("      SECURITY_MANAGER_CLASS = AirflowAstroSecurityManager ")
    print("      {{- end }} ")
    print("  workers: ")
    print("    affinity: {} ")
    print("    extraContainers: [] ")
    print("    extraInitContainers: [] ")
    print("    extraVolumeMounts: [] ")
    print("    extraVolumes: [] ")
    print("    hostAliases: [] ")
    print("    keda: ")
    print("      cooldownPeriod: 30 ")
    print("      enabled: false ")
    print("      maxReplicaCount: 10 ")
    print("      minReplicaCount: 0 ")
    print("      namespaceLabels: {} ")
    print("      pollingInterval: 5 ")
    print("    kerberosSidecar: ")
    print("      enabled: false ")
    print("      resources: {} ")
    print("    logGroomerSidecar: ")
    print("      args: ")
    print("      - /usr/local/bin/clean-airflow-logs ")
    print("      resources: {} ")
    print("      retentionDays: 15 ")
    print("    nodeSelector: {} ")
    print("    persistence: ")
    print("      annotations: {} ")
    print("      enabled: false ")
    print("      fixPermissions: false ")
    print("      size: 100Gi ")
    print("    podAnnotations: {} ")
    print("    replicas: 1 ")
    print("    resources: ")
    print("      limits: ")
    print("        cpu: 1000m ")
    print("        ephemeral-storage: 2Gi ")
    print("        memory: 3840Mi ")
    print("      requests: ")
    print("        cpu: 1000m ")
    print("        ephemeral-storage: 1Gi ")
    print("        memory: 3840Mi ")
    print("    safeToEvict: true ")
    print("    securityContext: {} ")
    print("    serviceAccount: ")
    print("      annotations: {} ")
    print("      create: true ")
    print("      name: null ")
    print("    strategy: ")
    print("      rollingUpdate: ")
    print("        maxSurge: 100% ")
    print("        maxUnavailable: 50% ")
    print("    terminationGracePeriodSeconds: 600 ")
    print("    tolerations: [] ")
    print("    topologySpreadConstraints: [] ")
    print("astronomer: ")
    print("  images: ")
    print("    certgenerator: ")
    print("      repository: quay.io/astronomer/ap-certgenerator ")
    print("      tag: 0.1.2 ")
    print("authSidecar: ")
    print("  enabled: false ")
    print("  port: 8084 ")
    print("  pullPolicy: IfNotPresent ")
    print("  repository: nginxinc/nginx-unprivileged ")
    print("  tag: stable ")
    print("defaultRuntimeRepository: quay.io/astronomer/astro-runtime ")
    print("extraObjects: [] ")
    print("helmValuesRevisionId: 1 ")
    print("ingress: ")
    print("  acme: false ")
    print("  auth: ")
    print("    enabled: true ")
    print(f"  baseDomain: {baseDomain} ")
    print(f"  class: {astroReleaseName}-nginx ")
    print("  enabled: true ")
    print("  flowerAnnotations: ")
    print(f"    kubernetes.io/ingress.class: {astroReleaseName}-nginx ")
    print("    nginx.ingress.kubernetes.io/auth-response-headers: authorization, username, email ")
    print(f"    nginx.ingress.kubernetes.io/auth-signin: https://app.{baseDomain}/login ")
    print(f"    nginx.ingress.kubernetes.io/auth-url: https://houston.{baseDomain}/v1/authorization ")
    print("    nginx.ingress.kubernetes.io/configuration-snippet: |2- ")
    print(" ")
    print(f"                   if ($host = '{astroReleaseName}-flower.{baseDomain}' ) {'{'} ")
    print(f"                     rewrite ^ https://deployments.{baseDomain}/{sys.argv[2]}\{'}'}/flower permanent; ")
    print("                   } ")
    print("                   subs_filter_types text/css text/xml text/css; ")
    print(f"                   sub_filter '=\"/' '=\"/{sys.argv[2]}/flower/'; ")
    print("                   sub_filter_last_modified on; ")
    print("                   sub_filter_once off; ")
    print("    nginx.ingress.kubernetes.io/custom-http-errors: 403,404,502,503 ")
    print(f"    nginx.ingress.kubernetes.io/proxy-cookie-path: / /{sys.argv[2]}/ ")
    print("    nginx.ingress.kubernetes.io/rewrite-target: /$2; ")
    print("  webserverAnnotations: ")
    print(f"    kubernetes.io/ingress.class: {astroReleaseName}-nginx ")
    print("    nginx.ingress.kubernetes.io/auth-response-headers: authorization, username, email ")
    print(f"    nginx.ingress.kubernetes.io/auth-signin: https://app.{baseDomain}/login ")
    print(f"    nginx.ingress.kubernetes.io/auth-url: https://houston.{baseDomain}/v1/authorization ")
    print("    nginx.ingress.kubernetes.io/configuration-snippet: |2- ")
    print(" ")
    print(f"                   if ($host = '{astroReleaseName}-airflow.{baseDomain}' ) {'{'} ")
    print(f"                     return 308 https://deployments.{baseDomain}/{sys.argv[2]}/airflow/$request_uri; ")
    print("                   } ")
    print("    nginx.ingress.kubernetes.io/custom-http-errors: 403,404,502,503 ")
    print(f"    nginx.ingress.kubernetes.io/proxy-cookie-path: / /{sys.argv[2]}/ ")
    print("    nginx.ingress.kubernetes.io/server-snippet: |2- ")
    print(" ")
    print("                   location ^~ /api/ { ")
    print(f"                     if ($host = 'deployments.{baseDomain}' ) {'{'} ")
    print("                       return 404; ")
    print("                     } ")
    print(f"                     proxy_pass https://deployments.{baseDomain}/{sys.argv[2]}/airflow/$request_uri; ")
    print("                   } ")
    print("loggingSidecar: ")
    print("  customConfig: false ")
    print("  enabled: false ")
    print("  name: sidecar-logging-consumer ")
    print("networkNSLabels: false ")
    print("platform: {} ")
    print("runtimeImages: ")
    print("  airflow: ")
    print("    repository: quay.io/astronomer/astro-runtime ")
    print("  flower: ")
    print("    repository: quay.io/astronomer/astro-runtime ")
    print("sccEnabled: false ")
    print("shouldApply: false ")
    print("sslmode: disable ")
    print("workers:")
    print("  autoscaling:")
    print("    enabled: false")
    print("    maxReplicas: 10")
    print("    minReplicas: 1")
    print("    targetCPUUtilization: 80")
    print("    targetMemoryUtilization: 80")
